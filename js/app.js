
/* ---------- ุจูุงูุงุช ุชุฌุฑูุจูุฉ (dummy) ---------- */
const DB = {
  // ๐ฉ ุงูุฃูุณุงู (departments)
  departments: [
    {
      id: "anesthesia",
      name: "ุงูุชุฎุฏูุฑ",
      about: "ูุณู ูุชุฎุตุต ุจุงูุนูุงูุฉ ูุงูุชุฎุฏูุฑ.",
      stages: ["Stage 2", "Stage 3"],
      teachers: ["ุฏ. ููุซ", "ุฏ.ุนุงุฏู"]
    },
    {
      id: "laboratory",
      name: "ุงููุฎุชุจุฑ",
      about: "ุงูุชุญุงููู ูุงููุญูุต ุงููุฎุจุฑูุฉ.",
      stages: ["Stage 1"],
      teachers: ["ุฏ. ูุฑูู", "ุฏ. ุญุณู"]
    },
    {
      id: "radiology",
      name: "ุงูุฃุดุนุฉ",
      about: "ุงูุชุตููุฑ ุงูุทุจู ููุฑุงุกุชู.",
      stages: ["Stage 2", "Stage 3"],
      teachers: ["ุฏ. ููุฏ"]
    },
    {
      id: "dentistry",
      name: "ุชูููุงุช ุตูุงุนุฉ ุงูุฃุณูุงู",
      about: "ุงูุนูุงูุฉ ูุนูููุงุช ุงูุฃุณูุงู.",
      stages: ["Stage 1", "Stage 2"],
      teachers: ["ุฏ. ูููู"]
    },
    {
      id: "optics",
      name: "ุงูุจุตุฑูุงุช",
      about: "ุนููู ูุจุตุฑูุงุช ุทุจูุฉ.",
      stages: ["Stage 1"],
      teachers: ["ุฏ. ูุฑูู"]
    },
    {
      id: "public_health",
      name: "ุตุญุฉ ุงููุฌุชูุน",
      about: "ุงูููุงูุฉ ูุงูุณูุงุณุงุช ุงูุตุญูุฉ.",
      stages: ["Stage 3"],
      teachers: ["ุฏ. ููุฏ"]
    }
  ],

  // ๐ฉ ุงูุฏูุฑุงุช (courses)
  courses: [
    // === ุงูุฏูุฑุงุช ุงูุฃุตููุฉ ===
    {
      id: "c201",
      title: "ุงูุชุฎุฏูุฑ ุงููุฒุงุฑู",
      desc: "ุฏูุฑุฉ ุฃูููุงูู ูุดุฑุญ ูุงุฏุฉ ุงูุชุฎุฏูุฑ ุงููุฒุงุฑูุฉ",
      subject: "ุชุฎุฏูุฑ",
      stage: "Stage 3",
      dept: "anesthesia",
      thumb: "an.png",
      lessons: [
        {
          id: "c201l1",
          title: "ูุญุงุถุฑุฉ Regional Anesthesia :: ุงูุฌุฒุก ุงูุฃูู",
          yt: "OaQCo5059pk"
        },
        {
          id: "c201l2",
          title: "ูุญุงุถุฑุฉ Regional anesthesia :: ุงูุฌุฒุก ุงูุซุงูู",
          yt: "4g08dChJboA"
        }
      ]
    },
    {
      id: "c102",
      title: "ุงูุชุฎุฏูุฑ ุงููุธุฑู",
      desc: "ููุฑุณ ุดุฑุญ ูุงุฏุฉ ุงูุชุฎุฏูุฑ ุงููุธุฑู ูููุฑุญูุฉ ุงูุซุงูุซุฉ",
      subject: "ุชุฎุฏูุฑ",
      stage: "Stage 3",
      dept: "anesthesia",
      thumb: "an.png",
      lessons: [
        { id: "c102l1", title: "ุงูุชุฎุฏูุฑ ุงูููุถุนู", yt: "dQw4w9WgXcQ" },
        { id: "c102l2", title: "ุงูุฑุงุถ ุงูููู ูุงูุชุฎุฏูุฑ", yt: "kJQP7kiw5Fk" },
        { id: "c102l3", title: "ุงูุฑุงุถ ุงููุจุฏ ูุงูุชุฎุฏูุฑ", yt: "kJQP7kiw5Fk" }
      ]
    },
    {
      id: "c103",
      title: "ุงูุฃุฌูุฒุฉ ูุธุฑู",
      desc: "ููุฑุณ ุดุฑุญ ูุงุฏุฉ ุงูุงุฌูุฒุฉ ุงููุธุฑู ูููุฑุญูุฉ ุงูุซุงูุซุฉ",
      subject: "ุฃุฌูุฒุฉ",
      stage: "Stage 3",
      dept: "anesthesia",
      thumb: "a.png",
      lessons: [
        { id: "c103l1", title: "ููุฏูุฉ", yt: "1w7OgIMMRc4" },
        { id: "c103l2", title: "ุงูุชูุงุนูุงุช", yt: "9bZkp7q19f0" }
      ]
    },
    {
      id: "c1",
      title: "ุชุดุฑูุญ ุงูุฅูุณุงู",
      desc: "ูุจุงุฏุฆ ุงูุชุดุฑูุญ.",
      subject: "ุชุดุฑูุญ",
      stage: "Stage 1",
      dept: "anesthesia",
      thumb: "images/anatomy.jpg",
      lessons: [
        { id: "c1l1", title: "ููุฏูุฉ ููุชุดุฑูุญ", yt: "dQw4w9WgXcQ" },
        { id: "c1l2", title: "ุงููููู ุงูุนุธูู", yt: "kXYiU_JCYtU" }
      ]
    },
    {
      id: "c2",
      title: "ุฃุณุงุณูุงุช ุงููุฎุชุจุฑ",
      desc: "ุทุฑู ุงูุชุญููู ุงููุฎุจุฑู.",
      subject: "ูุฎุชุจุฑ",
      stage: "Stage 1",
      dept: "laboratory",
      thumb: "images/lab.jpg",
      lessons: [
        { id: "c2l1", title: "ุฃุฏูุงุช ุงููุฎุชุจุฑ", yt: "3JZ_D3ELwOQ" }
      ]
    },
    {
      id: "c3",
      title: "ุชุตููุฑ ุดุนุงุนู",
      desc: "ูุจุงุฏุฆ ุงูุฃุดุนุฉ.",
      subject: "ุฃุดุนุฉ",
      stage: "Stage 2",
      dept: "radiology",
      thumb: "images/radiology.jpg",
      lessons: [
        { id: "c3l1", title: "ููุงููู ุฃุณุงุณูุฉ", yt: "V-_O7nl0Ii0" }
      ]
    },

    // === ุฏูุฑุงุช ููููุฉ ุฅุถุงููุฉ ===
    {
      id: "c4",
      title: "ููุฏูุฉ ูู ุชูููุงุช ุตูุงุนุฉ ุงูุฃุณูุงู",
      desc: "ุฃุณุงุณูุงุช ุทุจ ุงูุฃุณูุงู.",
      subject: "ุชูููุงุช ุตูุงุนุฉ ุงูุงุณูุงู",
      stage: "Stage 1",
      dept: "dentistry",
      thumb: "images/dentistry.jpg",
      lessons: [
        { id: "c4l1", title: "ุงูุฃุฏูุงุช ุงูุณููุฉ", yt: "abc123xyz" }
      ]
    },
    {
      id: "c5",
      title: "ุงูุจุตุฑูุงุช ุงูุณุฑูุฑูุฉ",
      desc: "ุชุดุฎูุต ุงูุนููู.",
      subject: "ุจุตุฑูุงุช",
      stage: "Stage 1",
      dept: "optics",
      thumb: "images/optics.jpg",
      lessons: [
        { id: "c5l1", title: "ููุฏูุฉ ูู ุงูุจุตุฑูุงุช", yt: "def456uvw" }
      ]
    },
    {
      id: "c6",
      title: "ุงูุตุญุฉ ุงูุนุงูุฉ ุงููุชูุฏูุฉ",
      desc: "ุจุฑุงูุฌ ุงูููุงูุฉ.",
      subject: "ุตุญุฉ ุงููุฌุชูุน",
      stage: "Stage 3",
      dept: "public_health",
      thumb: "images/public_health.jpg",
      lessons: [
        { id: "c6l1", title: "ุงูุณูุงุณุงุช ุงูุตุญูุฉ", yt: "ghi789rst" }
      ]
    }
  ],

  // ๐ฉ ุงูููุงุฒู (notes)
  notes: [
    {
      id: "n201",
      title: "ุงูุงุฌูุฒุฉ ูุธุฑู",
      teacher: "ุฏูุชูุฑ ููุซู",
      stage: "ุงููุฑุญูุฉ ุงูุซุงูุซุฉ",
      number: "1",
      dept: "anesthesia",
      subject: "ุงุฌูุฒุฉ",
      file: "files/a1.pdf"
    },
    {
      id: "n101",
      subject: "ุฃุฌูุฒุฉ",
      number: 1,
      title: "ุงูุฃุฌูุฒุฉ ูุธุฑู 1",
      teacher: "ุฏ. ููุซู",
      dept: "anesthesia",
      stage: "Stage 3",
      file: "files/a1.pdf"
    },
    {
      id: "n102",
      subject: "ุฃุฌูุฒุฉ",
      number: 2,
      title: "ุงูุฃุฌูุฒุฉ ูุธุฑู 2",
      teacher: "ุฏ. ููุซู",
      dept: "anesthesia",
      stage: "Stage 3",
      file: "files/a2.pdf"
    },
    {
      id: "n103",
      subject: "ุฃุฌูุฒุฉ",
      subject: "stage3",
      number: 3,
      title: "ุงูุฃุฌูุฒุฉ ูุธุฑู 3",
      teacher: "ุฏ. ููุซู",
      dept: "anesthesia",
      stage: "Stage 3",
      file: "files/a3.pdf"
    },
    {
      id: "n104",
      subject: "ุนูุงูุฉ ุนููู",
      number: "1,2,3",
      title: "ุนูุงูุฉ ุนููู",
      teacher: "ุฏ. ุนุงุฏู",
      dept: "anesthesia",
      stage: "Stage 3",
      file: "files/m123.pdf"
    },
    {
      id: "n1",
      subject: "ุชุดุฑูุญ",
      number: 1,
      title: "ููุงุญุธุงุช ุชุดุฑูุญ 101",
      teacher: "ุฏ. ุนูู",
      dept: "anesthesia",
      stage: "Stage 1",
      file: "files/anatomy101.pdf"
    },
    {
      id: "n2",
      subject: "ูุฎุชุจุฑ",
      number: 1,
      title: "ุฏุฑูุณ ูุฎุชุจุฑ 1",
      teacher: "ุฏ. ูุฑูู",
      dept: "laboratory",
      stage: "Stage 1",
      file: "files/lab1.pdf"
    },

    // === ููุงุฒู ููููุฉ ุฅุถุงููุฉ ===
    {
      id: "n3",
      subject: "ุฃุดุนุฉ",
      number: 1,
      title: "ููุฏูุฉ ูู ุงูุฃุดุนุฉ",
      teacher: "ุฏ. ููุฏ",
      dept: "radiology",
      stage: "Stage 2",
      file: "files/radiology1.pdf"
    },
    {
      id: "n4",
      subject: "ุฃุณูุงู",
      number: 1,
      title: "ููุฎุต ุทุจ ุงูุฃุณูุงู",
      teacher: "ุฏ. ูููู",
      dept: "dentistry",
      stage: "Stage 1",
      file: "files/dentistry1.pdf"
    },
    {
      id: "n5",
      subject: "ุจุตุฑูุงุช",
      number: 1,
      title: "ููุงุญุธุงุช ุงูุจุตุฑูุงุช",
      teacher: "ุฏ. ูุฑูู",
      dept: "optics",
      stage: "Stage 1",
      file: "files/optics1.pdf"
    },
    {
      id: "n6",
      subject: "ุตุญุฉ ุนุงูุฉ",
      number: 1,
      title: "ููุฎุต ุงูุตุญุฉ ุงูุนุงูุฉ",
      teacher: "ุฏ. ููุฏ",
      dept: "public_health",
      stage: "Stage 3",
      file: "files/public_health1.pdf"
    }
  ],

  // ๐ฉ ููุดูุฑุงุช ุซูุงููุฉ (culture)
  culture: [
  // ุงูููุดูุฑ 1
{
  id: "p1",
  type: "topic",
  title: "ุงูุฅุณุนุงู ุงูุฃููู ูู ุงููุฒูู",
  excerpt: "ุฃุณุงุณูุงุช ุงูุชุนุงูู ูุน ุงููุฒูู ุงูุญุงุฏ.",
  image: "images/culture1.jpg",
  body: [
    "ุงููุฒูู ุงูุญุงุฏ ููุนุฏ ุญุงูุฉ ุทุงุฑุฆุฉ ูุฏ ุชูุฏุฏ ุงูุญูุงุฉุ ููุฌุจ ุงูุชุฏุฎู ุงูุณุฑูุน ูููู ููุฏุงู ุงูุฏู.",
    "ุงูุฎุทูุฉ ุงูุฃููู: ุถุน ุถุบุทูุง ูุจุงุดุฑูุง ุนูู ููุงู ุงููุฒูู ุจุงุณุชุฎุฏุงู ูุทุนุฉ ุดุงุด ูุธููุฉ ุฃู ููุงุด ูุนูู.",
    "ุงูุฎุทูุฉ ุงูุซุงููุฉ: ุฑูุน ุงูุนุถู ุงููุตุงุจ ููู ูุณุชูู ุงูููุจ ุฅุฐุง ุฃููู ูุชูููู ุชุฏูู ุงูุฏู.",
    "ุงุณุชุฎุฏู ุถูุงุฏุฉ ุฃู ุฑุจุงุท ุถุบุท ุฅุฐุง ุงุณุชูุฑ ุงููุฒููุ ูุน ูุฑุงูุจุฉ ุงูุฏูุฑุฉ ุงูุฏูููุฉ.",
    "ุฑุงูุจ ุงููุฑูุถ ูุฃุนุฑุงุถ ุงูุตุฏูุฉ ูุซู ุดุญูุจ ุงูุฌูุฏุ ุจุฑูุฏุฉ ุงูุฃุทุฑุงูุ ุฃู ุถุนู ุงููุนู.",
    {
      type: "link",
      text: "ุชุนุฑู ุฃูุถูุง ุนูู ููููุฉ ุงูุชุนุงูู ูุน ุงูุญุฑูู",
      to: "p3"
    }
  ]
},

// ุงูููุดูุฑ 2
{
  id: "p2",
  type: "term",
  title: "ุฃููุณูููููุง (Hypoxemia)",
  excerpt: "ููุฉ ุงูุฃูุณุฌูู ูู ุงูุฏู.",
  image: "images/culture2.jpg",
  body: [
    "ุงูุฃููุณูููููุง ุชุนูู ุงูุฎูุงุถ ูุณุชูู ุงูุฃูุณุฌูู ูู ุงูุฏู ุงูุดุฑูุงูู ุนู ุงููุนุฏู ุงูุทุจูุนู.",
    "ูู ุฃูู ุฃุณุจุงุจูุง ุฃูุฑุงุถ ุงูุฑุฆุฉ ุงููุฒููุฉ ูุซู ุงูุฑุจู ู COPDุ ุฃูุฑุงุถ ุงูููุจุ ุฃู ุงูุชุณูู ุจุบุงุฒุงุช ูุนููุฉ.",
    "ุฃุนุฑุงุถูุง ุชุดูู ุถูู ุงูุชููุณุ ุฒูุฑูุฉ ุงูุดูุงู ูุงูุฃุธุงูุฑุ ุตุฏุงุนุ ูุชุนุจ ุดุฏูุฏ.",
    "ุงูุชุดุฎูุต ูุชู ุจูุงุณุทุฉ ููุงุณ ูุณุจุฉ ุงูุฃูุณุฌูู ูู ุงูุฏู (SpO2) ูุชุญููู ุงูุบุงุฒุงุช ุงูุดุฑูุงููุฉ.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: ุถุบุท ุฏู ูุฑุชูุน (Hypertension)",
      to: "p4"
    }
  ]
},

// ุงูููุดูุฑ 3
{
  id: "p3",
  type: "topic",
  title: "ููููุฉ ุงูุชุนุงูู ูุน ุงูุญุฑูู",
  excerpt: "ุฎุทูุงุช ุฃูููุฉ ูุนูุงุฌ ุงูุญุฑูู.",
  image: "images/culture3.jpg",
  body: [
    "ุงูุญุฑูู ุชููุณู ุฅูู ุซูุงุซ ุฏุฑุฌุงุช ุญุณุจ ุดุฏุชูุง: ุงูุฃููู (ุณุทุญูุฉ)ุ ุงูุซุงููุฉ (ุฃุนูู)ุ ูุงูุซุงูุซุฉ (ุดุฏูุฏุฉ).",
    "ูู ุญุงูุฉ ุงูุญุฑูู ุงูุจุณูุทุฉุ ุงุบุณู ุงูููุทูุฉ ุงููุตุงุจุฉ ุจูุงุก ุจุงุฑุฏ ุฌุงุฑู ููุฏุฉ 10 ุฏูุงุฆู.",
    "ูุง ุชุถุน ููุงุฏ ุฏูููุฉ ุฃู ูุนุฌูู ุฃุณูุงู ุนูู ุงูุญุฑู ูุฃููุง ูุฏ ุชุฒูุฏ ุงููุถุน ุณูุกูุง.",
    "ุชุบุทูุฉ ุงูุญุฑู ุจุดุงุด ูุนูู ุฃู ุถูุงุฏุฉ ูุธููุฉ ุชุณุงุนุฏ ุนูู ุงูุญูุงูุฉ ูู ุงูุนุฏูู.",
    {
      type: "link",
      text: "ุฅูุฑุฃ ุฃูุถูุง: ุงูุฅุณุนุงู ุงูุฃููู ูู ุงููุฒูู",
      to: "p1"
    }
  ]
},

// ุงูููุดูุฑ 4
{
  id: "p4",
  type: "term",
  title: "ุถุบุท ุฏู ูุฑุชูุน (Hypertension)",
  excerpt: "ุฒูุงุฏุฉ ุถุบุท ุงูุฏู ุนู ุงูุทุจูุนู.",
  image: "images/culture4.jpg",
  body: [
    "ุงุฑุชูุงุน ุถุบุท ุงูุฏู ูู ุฃูุซุฑ ุงูุฃูุฑุงุถ ุงููุฒููุฉ ุดููุนูุง ูู ุงูุนุงูู.",
    "ูุฏ ูุง ูุดุนุฑ ุงููุฑูุถ ุจุฃู ุฃุนุฑุงุถ ูุงุถุญุฉุ ูููู ูุฒูุฏ ูู ุฎุทุฑ ุงูุณูุชุฉ ุงูุฏูุงุบูุฉ ูุงูููุจุงุช ุงูููุจูุฉ.",
    "ุงูููุงูุฉ ุชุดูู ููุงุฑุณุฉ ุงูุฑูุงุถุฉ ุจุงูุชุธุงูุ ุชูุงูู ุบุฐุงุก ุตุญูุ ูุชุฌูุจ ุงูุชูุชุฑ.",
    "ุงููุชุงุจุนุฉ ุงูุฏูุฑูุฉ ูููุงุณ ุงูุถุบุท ูููุฉ ููุณูุทุฑุฉ ุนูู ุงููุฑุถ.",
    {
      type: "link",
      text: "ุดุงูุฏ ุฃูุถูุง: ุงูุชุบุฐูุฉ ุงูุณูููุฉ ููุทูุงุจ",
      to: "p5"
    }
  ]
},

// ุงูููุดูุฑ 5
{
  id: "p5",
  type: "topic",
  title: "ุงูุชุบุฐูุฉ ุงูุณูููุฉ ููุทูุงุจ",
  excerpt: "ุฃุทุนูุฉ ุชุณุงุนุฏ ุนูู ุงูุชุฑููุฒ ูุงูุชุญุตูู ุงูุฏุฑุงุณู.",
  image: "images/culture5.jpg",
  body: [
    "ุงูุบุฐุงุก ุงููุชูุงุฒู ูุญุณู ุงูุชุฑููุฒ ูุงูุฃุฏุงุก ุงูุฃูุงุฏููู ูุฏู ุงูุทูุงุจ.",
    "ูุฌุจุฉ ุงูุฅูุทุงุฑ ุชูุฏ ุงูุฌุณู ุจุงูุทุงูุฉ ููุฐ ุจุฏุงูุฉ ุงูููู.",
    "ุงูุฎุถุฑูุงุช ูุงูููุงูู ุงูุทุงุฒุฌุฉ ูุงูููุณุฑุงุช ูู ุฃูุถู ุงูุฃุทุนูุฉ ุงูุชู ุชุนุฒุฒ ุงูุฐุงูุฑุฉ.",
    "ุดุฑุจ ุงููุงุก ุจุงูุชุธุงู ููู ูุชุฑุทูุจ ุงูุฌุณู ูุชุญุณูู ุงูุชุฑููุฒ.",
    {
      type: "link",
      text: "ุงูุฑุฃ ุฃูุถูุง: ุถุบุท ุฏู ูุฑุชูุน (Hypertension)",
      to: "p4"
    }
  ]
},

// ุงูููุดูุฑ 6
{
  id: "p6",
  type: "topic",
  title: "ุงูุฅุณุนุงูุงุช ุงูุฃูููุฉ ูููุณูุฑ",
  excerpt: "ุฎุทูุงุช ุงูุชุนุงูู ูุน ุงููุณูุฑ ูุจู ุงููุตูู ููุทุจูุจ.",
  image: "images/culture6.jpg",
  body: [
    "ุงููุณูุฑ ุชุชุทูุจ ุชุซุจูุช ุงูุฌุฒุก ุงููุตุงุจ ูุชุฌูุจ ุงููุฒูุฏ ูู ุงูุถุฑุฑ.",
    "ูุง ุชุญุงูู ุฅุนุงุฏุฉ ุงูุนุธู ุฅูู ููุงููุ ุจู ุซุจุช ุงูุนุถู ุงููุตุงุจ ุจุงุณุชุฎุฏุงู ุฏุนุงูุฉ ุฃู ุฑุจุงุท.",
    "ูู ุจูู ุงูุถูุงุฏุฉ ุจุดูู ูุฑูุญ ุฏูู ุงูุถุบุท ุนูู ุงูุฏูุฑุฉ ุงูุฏูููุฉ.",
    "ุฅุฐุง ูุงู ููุงู ูุฒูู ูุฑุชุจุท ุจุงููุณูุฑุ ูู ุจุงูุถุบุท ุงููุจุงุดุฑ ุนูู ููุงู ุงููุฒูู ุฃูููุง.",
    "ุฑุงูุจ ุงููุฑูุถ ูุฃุนุฑุงุถ ุงูุตุฏูุฉ ุฃู ุงูุฃูู ุงูุดุฏูุฏ ูุงุทูุจ ุงููุณุงุนุฏุฉ ุงูุทุจูุฉ ููุฑูุง.",
    {
      type: "link",
      text: "ุชุนุฑู ุฃูุถูุง ุนูู ุงูุฅุณุนุงู ุงูุฃููู ูู ุงููุฒูู",
      to: "p1"
    }
  ]
},
// ุงููุตุทูุญ 1
{
  id: "t1",
  type: "term",
  title: "Hypertension (ุงุฑุชูุงุน ุถุบุท ุงูุฏู)",
  excerpt: "ุฒูุงุฏุฉ ุถุบุท ุงูุฏู ุนู ุงููุนุฏู ุงูุทุจูุนู.",
  image: "images/term1.jpg",
  body: [
    "ุงุฑุชูุงุน ุถุบุท ุงูุฏู ูู ุญุงูุฉ ูุฒููุฉ ุญูุซ ูููู ุถุบุท ุงูุฏู ูู ุงูุดุฑุงููู ุฃุนูู ูู ุงูุทุจูุนู.",
    "ูุซุงู: ุดุฎุต ูุฏูู ุถุบุท 150/95 ููู ุฒุฆุจู ูุนุชุจุฑ ูุตุงุจูุง ุจุงุฑุชูุงุน ุถุบุท ุงูุฏู.",
    "ุดุฑุญ ุจุณูุท: ุนูุฏูุง ุชููู ุงูุดุฑุงููู ุถููุฉ ุฃู ุตุนุจุฉ ุงูุชูุฏุฏุ ูุฒุฏุงุฏ ุงูุถุบุท ุฏุงุฎููุง.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ุฃู ุงููุงุก ูู ุฎุฑุทูู ุงูุญุฏููุฉ ูุถุบุท ุฃูุซุฑ ุนูุฏูุง ูููู ุงูุฎุฑุทูู ุถูููุง.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: ุฃููุณูููููุง (Hypoxemia)",
      to: "t2"
    }
  ]
},

// ุงููุตุทูุญ 2
{
  id: "t2",
  type: "term",
  title: "Hypoxemia (ุฃููุณูููููุง)",
  excerpt: "ุงูุฎูุงุถ ูุณุชูู ุงูุฃูุณุฌูู ูู ุงูุฏู.",
  image: "images/term2.jpg",
  body: [
    "ุงูุฃููุณูููููุง ูู ุงูุฎูุงุถ ูุณุชูู ุงูุฃูุณุฌูู ูู ุงูุฏู ุงูุดุฑูุงูู ุนู ุงูุญุฏ ุงูุทุจูุนู.",
    "ูุซุงู: ุดุฎุต ูุณุจุฉ ุงูุฃูุณุฌูู ูู ุงูุฏู ูุฏูู 85% ุจุฏูุงู ูู 95%-100% ุงูุทุจูุนู.",
    "ุดุฑุญ ุจุณูุท: ุฎูุงูุง ุงูุฌุณู ูุง ุชุญุตู ุนูู ุงูุฃูุณุฌูู ุงููุงูู ูุฃุฏุงุก ูุธุงุฆููุง.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ุฃูู ุชุญุงูู ุงูุชููุณ ูู ุบุฑูุฉ ูููุฆุฉ ุจุงูุฏุฎุงูุ ููู ุงูุฃูุณุฌูู ุงููุชุงุญ.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: Hyperglycemia (ุงุฑุชูุงุน ุงูุณูุฑ ุจุงูุฏู)",
      to: "t3"
    }
  ]
},

// ุงููุตุทูุญ 3
{
  id: "t3",
  type: "term",
  title: "Hyperglycemia (ุงุฑุชูุงุน ุงูุณูุฑ ุจุงูุฏู)",
  excerpt: "ุงุฑุชูุงุน ูุณุชูู ุงูุฌููููุฒ ูู ุงูุฏู.",
  image: "images/term3.jpg",
  body: [
    "ุงุฑุชูุงุน ุงูุณูุฑ ูู ุงูุฏู ูุนูู ุฃู ูุณุชูู ุงูุฌููููุฒ ูู ุงูุฏู ุฃุนูู ูู ุงูุทุจูุนู.",
    "ูุซุงู: ูุฑุงุกุฉ ุณูุฑ ุงูุฏู 200 ููุบ/ุฏูุณููุชุฑ ุจุนุฏ ุงููุฌุจุฉ.",
    "ุดุฑุญ ุจุณูุท: ุงูุฌุณู ูุง ูุณุชุฎุฏู ุงูุฌููููุฒ ุจุดูู ูุนูุงู ุจุณุจุจ ููุต ุงูุฅูุณูููู ุฃู ููุงููุฉ ุงูุฅูุณูููู.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ุฃู ุงูุฎูุงูุง ูุซู ุงููุญุฑูุงุชุ ูุงูุฌููููุฒ ูู ุงููููุฏุ ุฅุฐุง ูู ูุชู ุชูุตููู ุจุดูู ุตุญูุญ ูุธู ูู ุงูุฏู.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: Hypotension (ุงูุฎูุงุถ ุถุบุท ุงูุฏู)",
      to: "t4"
    }
  ]
},

// ุงููุตุทูุญ 4
{
  id: "t4",
  type: "term",
  title: "Hypotension (ุงูุฎูุงุถ ุถุบุท ุงูุฏู)",
  excerpt: "ุงูุฎูุงุถ ุถุบุท ุงูุฏู ุนู ุงููุนุฏู ุงูุทุจูุนู.",
  image: "images/term4.jpg",
  body: [
    "ุงูุฎูุงุถ ุถุบุท ุงูุฏู ูุนูู ุฃู ุถุบุท ุงูุฏู ูู ุงูุดุฑุงููู ุฃูู ูู ุงูุทุจูุนู.",
    "ูุซุงู: ูุฑุงุกุฉ ุถุบุท ุงูุฏู 85/55 ููู ุฒุฆุจู.",
    "ุดุฑุญ ุจุณูุท: ุชุฏูู ุงูุฏู ุฅูู ุงูุฃุนุถุงุก ุงูุญูููุฉ ูุฏ ูููู ุบูุฑ ูุงูู.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ุฎุฒุงู ููุงู ุถุบุทู ููุฎูุถุ ูุง ูุตู ุงููุงุก ููู ุงูุฃูุงุจูุจ.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: Tachycardia (ุชุณุฑุน ุถุฑุจุงุช ุงูููุจ)",
      to: "t5"
    }
  ]
},

// ุงููุตุทูุญ 5
{
  id: "t5",
  type: "term",
  title: "Tachycardia (ุชุณุฑุน ุถุฑุจุงุช ุงูููุจ)",
  excerpt: "ุฒูุงุฏุฉ ูุนุฏู ุถุฑุจุงุช ุงูููุจ ุนู ุงูุทุจูุนู.",
  image: "images/term5.jpg",
  body: [
    "ุชุณุฑุน ุถุฑุจุงุช ุงูููุจ ูุนูู ุฃู ุงูููุจ ููุจุถ ุจุณุฑุนุฉ ุฃุนูู ูู ุงูุทุจูุนู (>100 ุถุฑุจุฉ ูู ุงูุฏูููุฉ ููุจุงูุบูู).",
    "ูุซุงู: ุดุฎุต ูุนุฏู ุถุฑุจุงุชู 120 ูุจุถุฉ/ุฏูููุฉ ุฃุซูุงุก ุงูุฑุงุญุฉ.",
    "ุดุฑุญ ุจุณูุท: ุงูููุจ ูุนูู ุฃุณุฑุน ูุถุฎ ุงูุฏู ุจุณุจุจ ุญุงุฌุฉ ุงูุฌุณู ููุฃูุณุฌูู ุฃู ุจุณุจุจ ูุดุงูู ููุจูุฉ.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ูุถุฎุฉ ูุงุก ุชุนูู ุจุณุฑุนุฉ ุนุงููุฉ ูุชูุจูุฉ ุงูุทูุจ ุงููุจูุฑ ูุฌุฃุฉ.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: Bradycardia (ุจุทุก ุถุฑุจุงุช ุงูููุจ)",
      to: "t6"
    }
  ]
},

// ุงููุตุทูุญ 6
{
  id: "t6",
  type: "term",
  title: "Bradycardia (ุจุทุก ุถุฑุจุงุช ุงูููุจ)",
  excerpt: "ุงูุฎูุงุถ ูุนุฏู ุถุฑุจุงุช ุงูููุจ ุนู ุงูุทุจูุนู.",
  image: "images/term6.jpg",
  body: [
    "ุจุทุก ุถุฑุจุงุช ุงูููุจ ูุนูู ุฃู ุงูููุจ ููุจุถ ุจุจุทุก ุฃูู ูู ุงูุทุจูุนู (<60 ุถุฑุจุฉ ูู ุงูุฏูููุฉ ููุจุงูุบูู).",
    "ูุซุงู: ุดุฎุต ูุนุฏู ุถุฑุจุงุชู 50 ูุจุถุฉ/ุฏูููุฉ ุฃุซูุงุก ุงูุฑุงุญุฉ.",
    "ุดุฑุญ ุจุณูุท: ูุฏ ูููู ุจุณุจุจ ููุงูุฉ ุนุงููุฉุ ุฃู ูุดุงูู ููุฑุจุงุฆูุฉ ูู ุงูููุจ.",
    "ุทุฑููุฉ ุงูููู: ุชุฎูู ูุถุฎุฉ ูุงุก ุชุนูู ุจุจุทุกุ ูุฏ ูุง ููู ุงูุทูุจ ุจุงุญุชูุงุฌุงุช ุงูุฌุณู.",
    {
      type: "link",
      text: "ุฑุงุฌุน ุฃูุถูุง: Hypertension (ุงุฑุชูุงุน ุถุบุท ุงูุฏู)",
      to: "t1"
    }
  ]
}


    ],


  // ๐ฉ ุงูุงูุชุญุงูุงุช (exams)
  exams: [
    {
      id: "e1",
      date: "2025-09-05",
      day: "ุงูุฌูุนุฉ",
      name: "ุงูุชุญุงู ุชุดุฑูุญ",
      dept: "anesthesia",
      notes: ["n1"],
      courses: ["c1"],
      remarks: "ูุงุนุฉ 12"
    },
    {
      id: "e2",
      date: "2025-09-07",
      day: "ุงูุฃุญุฏ",
      name: "ุงูุชุญุงู ูุฎุชุจุฑ",
      dept: "laboratory",
      notes: ["n2"],
      courses: ["c2"],
      remarks: "ูุฎุงุจุฑ 3"
    },

    // === ุงูุชุญุงูุงุช ููููุฉ ุฅุถุงููุฉ ===
    {
      id: "e3",
      date: "2025-09-10",
      day: "ุงูุฃุฑุจุนุงุก",
      name: "ุงูุชุญุงู ุฃุดุนุฉ",
      dept: "radiology",
      notes: ["n3"],
      courses: ["c3"],
      remarks: "ูุงุนุฉ 5"
    },
    {
      id: "e4",
      date: "2025-09-12",
      day: "ุงูุฌูุนุฉ",
      name: "ุงูุชุญุงู ุฃุณูุงู",
      dept: "dentistry",
      notes: ["n4"],
      courses: ["c4"],
      remarks: "ูุงุนุฉ 8"
    },
    {
      id: "e5",
      date: "2025-09-15",
      day: "ุงูุงุซููู",
      name: "ุงูุชุญุงู ุจุตุฑูุงุช",
      dept: "optics",
      notes: ["n5"],
      courses: ["c5"],
      remarks: "ูุงุนุฉ 2"
    },
    {
      id: "e6",
      date: "2025-09-18",
      day: "ุงูุฎููุณ",
      name: "ุงูุชุญุงู ุตุญุฉ ุนุงูุฉ",
      dept: "public_health",
      notes: ["n6"],
      courses: ["c6"],
      remarks: "ูุงุนุฉ 1"
    }
  ]
};

/* ---------- ูุฎุชุตุฑ DOM ---------- */
const $ = (s, r=document) => r.querySelector(s);
const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
const qsParam = (k) => new URLSearchParams(location.search).get(k);

/* ---------- ุงูุฃุฏูุงุช ---------- */
function escapeHtml(s){ return String(s || '').replace(/[&<>"']/g,(m)=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' })[m]); }
function debounce(fn, ms=250){ let t; return (...a)=>{ clearTimeout(t); t = setTimeout(()=>fn(...a), ms); }; }

/* ---------- ุนูุงุตุฑ ุงูุจุญุซ ุงูุชูุงุนูู (Autocomplete) ---------- */
function initAutocomplete(inputEl, onSelect){
  // container ูุนุฑุถ ุงูุงูุชุฑุงุญุงุช
  const wrapper = document.createElement('div');
  wrapper.className = 'autocomplete';
  inputEl.parentNode.insertBefore(wrapper, inputEl);
  wrapper.appendChild(inputEl);

  const list = document.createElement('div');
  list.className = 'autocomplete-list';
  list.style.display = 'none';
  wrapper.appendChild(list);

  // ุตูุน ูุฌููุนุฉ ุงูุชุฑุงุญุงุช ูู ุงูุนูุงููู (ุฏูุฑุงุชุ ููุงุฒูุ ููุดูุฑุงุช)
  const items = [
    ...DB.courses.map(c => ({
        type: 'course',
        id: c.id,
        title: c.title,
        meta: `${c.subject} - ${c.stage}` // โ ุฅุถุงูุฉ ุงููุฑุญูุฉ ููุง
    })),
    ...DB.notes.map(n => ({
        type: 'note',
        id: n.id,
        title: n.title,
        meta: `${n.subject} - ${n.stage}` // โ ุฅุถุงูุฉ ุงููุฑุญูุฉ ููุง
    })),
    ...DB.culture.map(p => ({
        type: 'post',
        id: p.id,
        title: p.title,
        meta: p.type
    }))
];

  let activeIndex = -1;
  function renderList(filtered){
    list.innerHTML = filtered.map(it=>`<div class="autocomplete-item" data-type="${it.type}" data-id="${it.id}"><span>${escapeHtml(it.title)}</span><small class="muted">${escapeHtml(it.meta)}</small></div>`).join('');
    list.style.display = filtered.length ? 'block' : 'none';
    activeIndex = -1;
  }

  function query(q){
    if(!q) return renderList([]);
    const low = q.toLowerCase();
    const filtered = items.filter(it => (it.title + ' ' + it.meta).toLowerCase().includes(low)).slice(0,8);
    renderList(filtered);
  }

  const run = debounce((ev)=> query(ev.target.value), 160);
  inputEl.addEventListener('input', run);

  // keyboard navigation
  inputEl.addEventListener('keydown', (e)=>{
    if(list.style.display === 'none') return;
    const nodes = Array.from(list.children);
    if(e.key === 'ArrowDown'){ activeIndex = Math.min(activeIndex+1, nodes.length-1); e.preventDefault(); }
    else if(e.key === 'ArrowUp'){ activeIndex = Math.max(activeIndex-1, 0); e.preventDefault(); }
    else if(e.key === 'Enter'){ e.preventDefault(); if(activeIndex>=0) nodes[activeIndex].click(); else { inputEl.form && inputEl.form.requestSubmit(); } }
    nodes.forEach((n,i)=> n.classList.toggle('active', i===activeIndex));
    if(activeIndex>=0) nodes[activeIndex].scrollIntoView({block:'nearest', inline:'nearest'});
  });

  // click on item
  list.addEventListener('click', (e)=>{
    const item = e.target.closest('.autocomplete-item'); if(!item) return;
    const type = item.dataset.type; const id = item.dataset.id;
    list.style.display = 'none';
    inputEl.value = item.querySelector('span').textContent;
    if(typeof onSelect === 'function') onSelect({type, id});
  });

  // click outside -> hide
  document.addEventListener('click', (e)=>{ if(!wrapper.contains(e.target)) list.style.display = 'none'; });
}

/* ---------- ุชูุณููุงุช ุงูุตูุญุฉ ุงูุนุงูุฉ ---------- */
document.addEventListener('DOMContentLoaded', ()=>{
  const el = $('#year'); if(el) el.textContent = new Date().getFullYear();

  // init autocomplete on any search inputs that exist in header/hero
  const homeInput = $('#homeSearch');
  if(homeInput) initAutocomplete(homeInput, ({type,id})=>{
    if(type === 'course') location.href = `course-details.html?courseId=${id}`;
    else if(type === 'note') location.href = `notes.html?filter=${id}`;
    else if(type === 'post') location.href = `culture-post.html?postId=${id}`;
  });

  // generic: if a search field exists on courses page, enhance it too
  const coursesSearch = $('#courseSearch');
  if(coursesSearch) initAutocomplete(coursesSearch, ({type,id})=>{
    if(type==='course') location.href = `course-details.html?courseId=${id}`;
    else if(type==='post') location.href = `culture-post.html?postId=${id}`;
  });
});

/* ---------- Renderers (per page) ---------- */

/* Helpers ูุจุทุงูุงุช */
function formatCourseCard(course){
  return `
    <article class="card">
      <img class="thumb" src="${course.thumb}" alt="${escapeHtml(course.title)}" />
      <div class="content">
        <div class="chips"><span class="chip">${escapeHtml(course.subject)}</span><span class="chip">${escapeHtml(course.stage)}</span></div>
        <h3>${escapeHtml(course.title)}</h3>
        <p class="muted">${escapeHtml(course.desc)}</p>
        <div style="margin-top:10px;display:flex;gap:8px;justify-content:flex-start">
          <a class="btn" href="course-details.html?courseId=${course.id}">ุชูุงุตูู</a>
          <a class="btn ghost" href="notes.html?course=${course.id}">ููุงุฒู ูุชุนููุฉ</a>
        </div>
      </div>
    </article>
  `;
}
function formatNoteCard(note){
  return `
    <article class="card">
      <div class="content">
        <div class="chips">
          <span class="chip">${escapeHtml(note.subject)}</span>
          <span class="chip">${escapeHtml(note.stage)}</span> <!-- โ ุฅุถุงูุฉ ุงููุฑุญูุฉ ููุง -->
          <span class="chip">ูุฐูุฑุฉ ${note.number}</span>
        </div>
        <h3>${escapeHtml(note.title)}</h3>
        <p class="muted">ุงููุฏุฑูุณ: ${escapeHtml(note.teacher)}</p>
        <div style="margin-top:10px;display:flex;gap:8px">
          <a class="btn" href="${note.file}" download>ุชุญููู</a>
        </div>
      </div>
    </article>
  `;
}

function formatCultureCard(post){
  return `
    <article class="card">
      <img class="thumb" src="${post.image}" alt="${escapeHtml(post.title)}" />
      <div class="content">
        <h3>${escapeHtml(post.title)}</h3>
        <p class="muted">${escapeHtml(post.excerpt)}</p>
        <div style="margin-top:10px;display:flex;gap:8px">
          <a class="btn" href="culture-post.html?postId=${post.id}">ุงูุฑุฃ</a>
        </div>
      </div>
    </article>
  `;
}

/* Page: Home */
function renderHome(){
  const hc = $('#homeCourses'); if(hc) hc.innerHTML = DB.courses.slice(0,3).map(formatCourseCard).join('');
  const hn = $('#homeNotes'); if(hn) hn.innerHTML = DB.notes.slice(0,3).map(formatNoteCard).join('');
  const hcu = $('#homeCulture'); if(hcu) hcu.innerHTML = DB.culture.slice(0,3).map(formatCultureCard).join('');
  const hf = $('#homeSearchForm');
  if(hf) hf.addEventListener('submit', e=>{
    e.preventDefault();
    const q = $('#homeSearch').value.trim();
    if(!q) return location.href='courses.html';
    location.href = `courses.html?search=${encodeURIComponent(q)}`;
  });
}

/* Page: Departments */
function renderDepartments(){
  const root = $('#deptList');
  if(!root) return;
  root.innerHTML = DB.departments.map(d=>`
    <article class="card">
      <div class="content">
        <h3>${escapeHtml(d.name)}</h3>
        <p class="muted">${escapeHtml(d.about)}</p>
        <div style="margin-top:10px">
          <button class="btn" data-dept="${d.id}">ุนุฑุถ ุงููุณู</button>
        </div>
      </div>
    </article>
  `).join('');

  document.body.addEventListener('click', (e)=>{
    const deptId = e.target.getAttribute('data-dept');
    if(deptId) showDeptDetails(deptId);
  });
}
function showDeptDetails(deptId){
  const d = DB.departments.find(x=>x.id===deptId); if(!d) return;
  $('#deptTitle').textContent = d.name;
  $('#deptStages').innerHTML = d.stages.map(s=>`<button class="chip" data-stage="${encodeURIComponent(s)}">${escapeHtml(s)}</button>`).join(' ');
  $('#deptTeachers').innerHTML = d.teachers.map(t=>`<span class="chip">${escapeHtml(t)}</span>`).join(' ');
  $('#deptDetails').hidden = false;
  $('#stageContent').innerHTML = d.stages.map(stage=>{
    const courses = DB.courses.filter(c=>c.dept===deptId && c.stage===stage);
    const notes = DB.notes.filter(n=>n.dept===deptId && n.stage===stage);
    return `<div class="card"><div class="content"><h4>${escapeHtml(stage)}</h4>
      <div><strong>ุฏูุฑุงุช:</strong> ${courses.map(c=>escapeHtml(c.title)).join(', ') || 'ูุง ุชูุฌุฏ'}</div>
      <div><strong>ููุงุฒู:</strong> ${notes.map(n=>escapeHtml(n.title)).join(', ') || 'ูุง ุชูุฌุฏ'}</div></div></div>`;
  }).join('');
}

/* Page: Courses */
function renderCourses(){
  const deptSel = $('#filterDepartment');
  if(!deptSel) return;
  deptSel.innerHTML = '<option value=\"\">ูู ุงูุฃูุณุงู</option>';
  DB.departments.forEach(d=> deptSel.insertAdjacentHTML('beforeend', `<option value="${d.id}">${escapeHtml(d.name)}</option>`));
  const uniqueStages = [...new Set(DB.courses.map(c=>c.stage))];
  const stageSel = $('#filterStage');
  stageSel.innerHTML = '<option value="">ูู ุงููุฑุงุญู</option>';
  uniqueStages.forEach(s=> stageSel.insertAdjacentHTML('beforeend', `<option value="${s}">${escapeHtml(s)}</option>`));

  const grid = $('#coursesGrid');
  const initQuery = qsParam('search') || '';

  $('#courseSearch').value = initQuery;

  function applyFilters(){
    const q = ($('#courseSearch').value || '').trim().toLowerCase();
    const dept = $('#filterDepartment').value;
    const stage = $('#filterStage').value;
    let list = DB.courses.slice();
    if(q) list = list.filter(c => (c.title + ' ' + c.desc + ' ' + c.subject).toLowerCase().includes(q));
    if(dept) list = list.filter(c=>c.dept===dept);
    if(stage) list = list.filter(c=>c.stage===stage);
    grid.innerHTML = list.map(formatCourseCard).join('') || '<div class="card"><div class="content">ูุง ุชูุฌุฏ ูุชุงุฆุฌ</div></div>';
  }

  $('#courseSearch').addEventListener('input', debounce(applyFilters, 160));
  $('#filterDepartment').addEventListener('change', applyFilters);
  $('#filterStage').addEventListener('change', applyFilters);
  applyFilters();
}

/* Page: Course Details */
function renderCourseDetails(){
  const courseId = qsParam('courseId');
  if(!courseId) return $('#courseTitle').textContent = 'ูู ูุชู ุชุญุฏูุฏ ุฏูุฑุฉ';
  const course = DB.courses.find(c=>c.id===courseId);
  if(!course) return $('#courseTitle').textContent = 'ุงูุฏูุฑุฉ ุบูุฑ ููุฌูุฏุฉ';
  $('#courseTitle').textContent = course.title;
  $('#courseThumb').src = course.thumb;
  $('#courseMeta').innerHTML = `<span class="chip">${escapeHtml(course.subject)}</span><span class="chip">${escapeHtml(course.stage)}</span><span class="chip">${escapeHtml(course.dept)}</span>`;
  const listEl = $('#lessonList'); listEl.innerHTML = '';
  course.lessons.forEach((l, idx)=>{
    const watchedKey = `watched:${courseId}:${l.id}`;
    const watched = localStorage.getItem(watchedKey) === '1';
    const li = document.createElement('li');
    li.innerHTML = `<span>${idx+1}. ${escapeHtml(l.title)}</span>
                    <div style="display:flex;gap:8px">
                      <button class="btn" data-play="${l.id}">ุดุบูู</button>
                      <button class="btn ghost" data-toggle-watched="${l.id}">${watched ? 'ููุดุงููุฏ' : 'ุนููู ููุดุงูุฏุฉ'}</button>
                    </div>`;
    listEl.appendChild(li);
  });

  function updateProgress(){
    const total = course.lessons.length;
    const watchedCount = course.lessons.reduce((s,l)=> s + (localStorage.getItem(`watched:${courseId}:${l.id}`)==='1' ? 1:0), 0);
    const percent = Math.round((watchedCount/total)*100);
    $('#courseProgress').style.width = percent+'%';
  }
  updateProgress();

  const player = $('#ytPlayer'); const nowPlaying = $('#nowPlaying');
  function playLesson(lessonId){
    const lesson = course.lessons.find(x=>x.id===lessonId); if(!lesson) return;
    player.src = `https://www.youtube.com/embed/${lesson.yt}?rel=0&autoplay=1`;
    nowPlaying.textContent = lesson.title;
    localStorage.setItem(`watched:${courseId}:${lessonId}`,'1');
    $$('[data-toggle-watched]').forEach(b=>{
      const id = b.getAttribute('data-toggle-watched');
      const watched = localStorage.getItem(`watched:${courseId}:${id}`) === '1';
      b.textContent = watched ? 'ููุดุงููุฏ' : 'ุนููู ููุดุงูุฏุฉ';
    });
    updateProgress();
  }

  document.body.addEventListener('click', (e)=>{
    const playId = e.target.getAttribute('data-play'); if(playId) playLesson(playId);
    const toggleId = e.target.getAttribute('data-toggle-watched');
    if(toggleId){
      const key = `watched:${courseId}:${toggleId}`;
      const cur = localStorage.getItem(key) === '1';
      localStorage.setItem(key, cur ? '0':'1');
      updateProgress();
      e.target.textContent = localStorage.getItem(key) === '1' ? 'ููุดุงููุฏ' : 'ุนููู ููุดุงูุฏุฉ';
    }
  });

  $('#prevLesson').addEventListener('click', ()=>{
    const current = course.lessons.findIndex(l => $('#nowPlaying').textContent === l.title);
    const prev = Math.max(0, current-1);
    if(current === -1) playLesson(course.lessons[0].id); else playLesson(course.lessons[prev].id);
  });
  $('#nextLesson').addEventListener('click', ()=>{
    const current = course.lessons.findIndex(l => $('#nowPlaying').textContent === l.title);
    const next = Math.min(course.lessons.length-1, current+1);
    if(current === -1) playLesson(course.lessons[0].id); else playLesson(course.lessons[next].id);
  });
}

/* Page: Notes */
function renderNotes(){
  const deptSel = $('#noteDept'), stageSel = $('#noteStage'), subjSel = $('#noteSubject');
  if(!deptSel) return;
  deptSel.innerHTML = '<option value="">ูู ุงูุฃูุณุงู</option>'; DB.departments.forEach(d=> deptSel.insertAdjacentHTML('beforeend', `<option value="${d.id}">${escapeHtml(d.name)}</option>`));
  stageSel.innerHTML = '<option value="">ูู ุงููุฑุงุญู</option>'; [...new Set(DB.notes.map(n=>n.stage))].forEach(s=> stageSel.insertAdjacentHTML('beforeend', `<option value="${s}">${escapeHtml(s)}</option>`));
  subjSel.innerHTML = '<option value="">ูู ุงูููุงุฏ</option>'; [...new Set(DB.notes.map(n=>n.subject))].forEach(s=> subjSel.insertAdjacentHTML('beforeend', `<option value="${s}">${escapeHtml(s)}</option>`));
  const grid = $('#notesGrid');

  function apply(){
    const q = ($('#noteSearch').value||'').trim().toLowerCase();
    const dept = deptSel.value; const stage = stageSel.value; const subject = subjSel.value;
    let list = DB.notes.slice();
    if(q) list = list.filter(n => (n.title + ' ' + n.teacher + ' ' + n.subject).toLowerCase().includes(q));
    if(dept) list = list.filter(n=> n.dept===dept);
    if(stage) list = list.filter(n=> n.stage===stage);
    if(subject) list = list.filter(n=> n.subject===subject);
    grid.innerHTML = list.map(formatNoteCard).join('') || '<div class="card"><div class="content">ูุง ุชูุฌุฏ ููุงุญุธุงุช</div></div>';
  }
  $('#noteSearch').addEventListener('input', debounce(apply, 160));
  deptSel.addEventListener('change',apply); stageSel.addEventListener('change',apply); subjSel.addEventListener('change',apply);

  const qcourse = qsParam('course');
  if(qcourse){
    const c = DB.courses.find(x=>x.id===qcourse);
    if(c) $('#noteSearch').value = c.subject;
  }
  apply();
}

/* Page: Exams */
function renderExams(){
  const deptSel = $('#examDeptFilter');
  if(!deptSel) return;
  deptSel.innerHTML = '<option value="">ูู ุงูุฃูุณุงู</option>';
  DB.departments.forEach(d=> deptSel.insertAdjacentHTML('beforeend', `<option value="${d.id}">${escapeHtml(d.name)}</option>`));
  const tbody = $('#examTable tbody');
  function apply(){
    const dept = deptSel.value;
    let list = DB.exams.slice();
    if(dept) list = list.filter(e=> e.dept === dept);
    tbody.innerHTML = list.map(e=>{
      const notesLinks = e.notes.map(id=>{ const n=DB.notes.find(x=>x.id===id); return n? `<a href="${n.file}" download>${escapeHtml(n.title)}</a>` : '' }).join(', ');
      const coursesLinks = e.courses.map(id=>{ const c=DB.courses.find(x=>x.id===id); return c? `<a href="course-details.html?courseId=${c.id}">${escapeHtml(c.title)}</a>` : '' }).join(', ');
      return `<tr><td>${escapeHtml(e.date)}</td><td>${escapeHtml(e.day)}</td><td>${escapeHtml(e.name)}</td><td>${escapeHtml(e.dept)}</td><td>${notesLinks} ${coursesLinks}</td><td>${escapeHtml(e.remarks)}</td></tr>`;
    }).join('') || '<tr><td colspan="6">ูุง ุชูุฌุฏ ููุงุนูุฏ</td></tr>';
  }
  deptSel.addEventListener('change',apply); apply();
}

/* Page: Culture (grid) */
function renderCulture(){
  const grid = $('#cultureGrid'); if(!grid) return;
  function apply(){
    const q = ($('#cultureSearch').value||'').trim().toLowerCase();
    const filter = $('#cultureFilter').value;
    let list = DB.culture.slice();
    if(filter) list = list.filter(p=> p.type === filter);
    if(q) list = list.filter(p=> (p.title + ' ' + p.excerpt).toLowerCase().includes(q));
    grid.innerHTML = list.map(formatCultureCard).join('') || '<div class="card"><div class="content">ูุง ุชูุฌุฏ ููุงูุงุช</div></div>';
  }
  $('#cultureSearch').addEventListener('input', debounce(apply, 120));
  $('#cultureFilter').addEventListener('change', apply);
  apply();
}

/* Page: Culture Post (single page view) */
function renderCulturePostPage(){
  const postId = qsParam('postId');
  const wrap = $('#postContent');
  if(!wrap) return;
  if(!postId) { wrap.innerHTML = '<div class="content">ูู ูุชู ุชุญุฏูุฏ ุงูููุงู.</div>'; return; }
  const post = DB.culture.find(p=>p.id===postId);
  if(!post){ wrap.innerHTML = '<div class="content">ุงูููุงู ุบูุฑ ููุฌูุฏ.</div>'; return; }
  wrap.innerHTML = `
    <div class="article-hero">
      <h1>${escapeHtml(post.title)}</h1>
      <div class="article-meta"><span>${escapeHtml(post.type)}</span><span class="muted">ูุงุจู ูููุฑุงุกุฉ</span></div>
      <img src="${post.image}" alt="${escapeHtml(post.title)}">
    </div>
    <div class="article-body">
      ${escapeHtml(post.body).replace(/\n/g,'<br><br>')}
    </div>
    <div style="margin-top:16px"><a class="link" href="medical-culture.html">โ ุงูุนูุฏุฉ ุฅูู ุงูููุงูุงุช</a></div>
  `;
}

/* ---------- ุชุทุจูู ุงูุฑูุฏุฑ ุญุณุจ ุงูุตูุญุฉ ---------- */
document.addEventListener('DOMContentLoaded', ()=>{
  const page = document.body.getAttribute('data-page');
  if(page === 'home') renderHome();
  else if(page === 'departments') renderDepartments();
  else if(page === 'courses') renderCourses();
  else if(page === 'course-details') renderCourseDetails();
  else if(page === 'notes') renderNotes();
  else if(page === 'exams') renderExams();
  else if(page === 'culture') renderCulture();
  else if(page === 'culture-post') renderCulturePostPage();
});
const cultureModal = document.getElementById("cultureModal");
const closeCultureModal = document.getElementById("closeCultureModal");
const cultureModalOverlay = document.getElementById("cultureModalOverlay");

// ูุชุญ ุงูู modal ุนูุฏ ุงูุถุบุท ุนูู ุฃู ุนูุตุฑ (ูุซุงูุ ูุงุญููุง ุงุฑุจุทู ูุน ุจูุงูุงุชู)
function openCultureModal(title, body, img) {
  document.getElementById("cultureModalTitle").textContent = title;
  document.getElementById("cultureModalBody").textContent = body;
  document.getElementById("cultureImage").src = img;

  cultureModal.classList.add("show");
}

// ุฅุบูุงู ุงูู modal ุนูุฏ ุงูุถุบุท ุนูู ุฒุฑ ุงูุฅุบูุงู ุฃู ุงูุฎูููุฉ
closeCultureModal.addEventListener("click", () => {
  cultureModal.classList.remove("show");
});

cultureModalOverlay.addEventListener("click", () => {
  cultureModal.classList.remove("show");
});
function goToPost(postId) {
  const post = DB.culture.find(p => p.id === postId);
  if (!post) return;

  document.getElementById("post-container").innerHTML = `
    <h1>${escapeHtml(post.title)}</h1>
    <img src="${post.image}" alt="${escapeHtml(post.title)}">
    ${renderBody(post.body)}
  `;
}
function renderBody(body) {
  return body.map(item => {
    // ุฅุฐุง ูุงู ุงููุต ุนุจุงุฑุฉ ุนู ุฑุงุจุท
    if (typeof item === "object" && item.type === "link") {
      // ุฑุงุจุท ูููุฐ ุฏุงูุฉ JS ุชุนุฑุถ ุงูููุดูุฑ ุงููุทููุจ
      return `<p><a href="#" onclick="showPost('${item.to}'); return false;">${escapeHtml(item.text)}</a></p>`;
    } 
    // ูุต ุนุงุฏู
    else if (typeof item === "string") {
      return `<p>${escapeHtml(item)}</p>`;
    }
  }).join('');
}

// ุฏุงูุฉ ูุนุฑุถ ุงูููุดูุฑ ุงููุทููุจ
function showPost(postId) {
  const post = DB.culture.find(p => p.id === postId);
  if (!post) return;

  // ุงูุชุฑุถ ุฃู ูุฏูู ุนูุตุฑ ูุญุชูู ุนูู ุงูููุดูุฑุ ูุซู: <div id="post-container"></div>
  const container = document.getElementById("post-container");
  if (!container) return;

  container.innerHTML = `
    <h1>${escapeHtml(post.title)}</h1>
    <img src="${post.image}" alt="${escapeHtml(post.title)}">
    ${renderBody(post.body)}
  `;
}
